@using System.Timers

@if (showMessage)
{
    <div class="demonick-toast demonick-fade show @CssClass demonick-toast-position">
        <div class="demonick-toast-header @CssClass">
            <strong class="demonick-mr-right">@Header</strong>
            <button type="button" @onclick="CloseMessage" class="demonick-close" data-dismiss="demonick-toast" aria-label="Close">
                <span aria-hidden="true">&times;</span>
            </button>
        </div>
        <div class="demonick-toast-body">
            <img src="@Image" class="demonick-toast-body-image" alt="Image"/>
            @Message
        </div>
    </div>
}

@code {
    string CssClass;
    string Image;
    string Header;
    string Message;

    Timer timer;

    bool showMessage;

    protected override void OnAfterRender(bool firstRender)
    {
        if (firstRender)
        {
            timer = new Timer {Interval = 4000};
            timer.Elapsed += ElapsedTimerHandler;
            timer.Start();
            StateHasChanged();
        }
    }

    void ElapsedTimerHandler(object sender, ElapsedEventArgs args)
    {
        Task.Run(CloseMessage);
    }

    public void SuccessfullMessage(string header, string message)
    {
        Header = header;
        Message = message;
        showMessage = true;
        CssClass = "demonick-toast-bg-success";
        Image = "demonick_toast_images/success_icon.png";
    }

    public void WarningMessage(string header, string message)
    {
        Header = header;
        Message = message;
        showMessage = true;
        CssClass = "demonick-toast-bg-warning";
        Image = "demonick_toast_images/warning_icon.png";
    }

    public void ErrorMessage(string header, string message)
    {
        Header = header;
        Message = message;
        showMessage = true;
        CssClass = "demonick-toast-bg-error";
        Image = "demonick_toast_images/error_icon.png";
    }

    public void ChooseMessageWithStatusCode(int? status, string header, string message)
    {
        switch (status)
        {
            case 1:
                SuccessfulMessage(header, message);
                break;
            case 2:
                WarningMessage(header, message);
                break;
            case 3:
                ErrorMessage(header, message);
                break;
        }
    }

    public async Task CloseMessage()
    {
        timer.Stop();
        timer.Elapsed -= ElapsedTimerHandler;
        timer.Dispose();
        showMessage = false;
        await InvokeAsync(StateHasChanged);
    }

}
